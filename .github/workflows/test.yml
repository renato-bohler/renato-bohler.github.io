name: Test

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  contents: write
  pull-requests: write

jobs:
  accessibility-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Project setup
        uses: ./.github/actions/setup
      - name: Install Chromium
        run: yarn playwright install chromium
      - name: Accessibility test
        run: yarn test:accessibility
      - name: Upload test artifacts on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-artifacts
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  visual-test:
    runs-on: ubuntu-latest
    env:
      SCREENSHOTS_DIRECTORY: 'e2e/__screenshots__'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Project setup
        uses: ./.github/actions/setup
      - name: Install Chromium
        run: yarn playwright install chromium
      - name: Visual regression test
        run: yarn test:visual --update-snapshots
      - name: Upload test artifacts on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-artifacts
          path: |
            playwright-report/
            test-results/
          retention-days: 30
      - name: Check for updated screenshots
        id: check
        run: |
          if [ -z "$(git status -s | grep $SCREENSHOTS_DIRECTORY)" ]; then
            echo "No screenshot updated"
          else
            echo "Found updated screenshots"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          fi
      - name: Commit and push changes
        if: steps.check.outputs.changes_detected
        run: |
          git add $SCREENSHOTS_DIRECTORY
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com>"
          git commit -m "test(e2e): updates screenshots [skip ci]"
          git push
      - name: Add PR review comments
        if: steps.check.outputs.changes_detected
        run: |
          sleep 10
          LAST_COMMIT_SHA=$(git rev-parse HEAD)
          CHANGED_SCREENSHOTS=$(git diff --name-only HEAD HEAD~1 | grep $SCREENSHOTS_DIRECTORY)

          for screenshot in $CHANGED_SCREENSHOTS
          do
            echo "Adding PR review comment for \"$screenshot\"..."
            curl -s -S -L -o /dev/null \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/comments \
              -d "{\"body\":\":eyes: Please review this visual change\",\"commit_id\":\"$LAST_COMMIT_SHA\",\"path\":\"$screenshot\",\"side\":\"RIGHT\",\"subject_type\":\"file\"}"
            sleep 3
          done

  eslint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Project setup
        uses: ./.github/actions/setup
      - name: ESLint
        run: yarn lint

  stylelint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Project setup
        uses: ./.github/actions/setup
      - name: Stylelint
        run: yarn stylelint

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Project setup
        uses: ./.github/actions/setup
      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_PUBLIC_CONTACT_ENDPOINT: ${{ vars.NEXT_PUBLIC_CONTACT_ENDPOINT }}
          NEXT_PUBLIC_FULLSTORY_ORG_ID: ${{ vars.NEXT_PUBLIC_FULLSTORY_ORG_ID }}
        run: yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: out
          path: out

  validate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Project setup
        uses: ./.github/actions/setup
        with:
          install-dependencies: false
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: out
          path: out
      - name: Validate HTML
        run: |
          npx nu-html-checker -f json ./out/index.html > ./validation-report.json
          ERROR_COUNT=$(cat ./validation-report.json | grep '"type": "error"' -c || ERROR_COUNT=0)

          if [ $ERROR_COUNT = 0 ]; then
            echo "No errors found"
            exit 0
          else
            cat ./validation-report.json
            echo "$ERROR_COUNT error(s) found!"
            exit 1
          fi
